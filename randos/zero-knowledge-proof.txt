## Zero Knowledge Proof

Classic example. Prove you have a 3-coloring of a map. This is an NP
complete problem.

You color the map. You hash each color (with a nonce). This hides the
values. You send the hashed map to the validator.

You let the validator ask to reveal two adjacent vertices. You
give the hash pre-image, and they can verify this.

You can repeat as many times as you want; but you need to permute the
colors used each time. This gives no info about the coloring.

Note: this is an *interactive* protocol for proving.

## Zero Knowledge Password Proof

A bad way to do login is to store a password on the server, and upload
that password to login. The server then verifies the password by
checking if they are equal.

You can make this slightly better by using a PBKDF: basically a salted
hash of the password. This will mean that it's harder to do a dictionary
attack against the verifier stored on the server. This protects you from
the server being hacked.

However, anyone who can eavesdrop the traffic will be able to read your
password off the network. To defeat this, you could do Diffie-Hellman
with the remote server to establish a session key.

This would defeat an eavesdropper, but not someone who can MITM. So the
remote server had better have a public key which you can verify and
which it can sign its DH message with.

But now let us say that the server can be hacked. The hacker can steal
the verifier, but it is of limited use if it uses PBKDF. But the hacker
can now MITM you because it has the secret key.

If you are sending the server your password, then you are revealing this
to the hacker.

This is particularly problematic if you reuse passwords on different
websites. The ability to reuse passwords would be desirable.

## Comparison With Private Key

A common login method is you upload a public key on setup, and then you
must sign nonces sent by the server with your private key. But this
requires you to have a device like a Yubikey. It makes it harder to log
on from other machines, and having a device like a Yubikey could be one
more thing that could be stolen.

Jonathan suggests that you could upload your private key encrypted with
a password to the remote server. The remote server could present this to
you, which you could then use your password to decrypt.

## Sources

* Personal communication: https://mail.google.com/mail/u/0/#inbox/KtbxLzGLkSbsHbrxhrPhzDskndMKpDbQDV
* Slightly more useful source: https://pdfs.semanticscholar.org/2880/993c1abc110e832422753a5134f8ccf0633b.pdf
